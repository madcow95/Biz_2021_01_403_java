import sys
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5 import uic
import shutil
from pytimekr import pytimekr
from MacroController import *

# UI 파일 위치
form_class = uic.loadUiType('Macro.ui')[0]


def setCourt(self, start):
    if self.cb_StartCourt.count() > 0:
        self.cb_EndCourt.clear()

        # self.cb_EndCourt.addItem(str(start))
        for i in range(start, 19):
            self.cb_EndCourt.addItem(str(i))
    else:
        # self.cb_StartCourt.addItem(str(start))
        # self.cb_EndCourt.addItem(str(start))
        for i in range(start, 19):
            self.cb_StartCourt.addItem(str(i))
            self.cb_EndCourt.addItem(str(i))


def setReservationTime(self, usedDate, week, holidays):
    self.cb_StartTime.clear()
    self.cb_EndTime.clear()

    # 빨간날
    if (usedDate in holidays) or (week == 6 or week == 7):
        self.isWeek = True
        for i in range(7):
            iStartTime = (i * 3) + 9 - i

            sStartTime = str(iStartTime)

            if iStartTime < 10:
                sStartTime = '0' + sStartTime

            self.cb_StartTime.addItem(sStartTime + ":00")
    else:
        self.isWeek = False
        for i in range(13):
            iStartTime = 9 + i

            sStartTime = str(iStartTime)

            if iStartTime < 10:
                sStartTime = '0' + sStartTime

            self.cb_StartTime.addItem(sStartTime + ":00")

def setReservationEndTime(ui, startTimeIndeex, usedDate, week, holidays):
    ui.clear()

    # 빨간날
    if (usedDate in holidays) or (week == 6 or week == 7):
        for i in range(startTimeIndeex, 7):
            iEndtime = (i * 3) + 11 - i
            sEndTime = str(iEndtime)

            if iEndtime == 23:
                sEndTime = str(iEndtime - 1)

            ui.addItem(sEndTime + ":00")
    else:
        for i in range(startTimeIndeex, 13):
            iEndtime = 10 + i
            sEndTime = str(iEndtime)

            if iEndtime == 23:
                sEndTime = str(iEndtime - 1)

            ui.addItem(sEndTime + ":00")

def validation(self, **kwargs):
    valRes = True

    if kwargs["teamName"] == '':
        self.setLog('대표자 미 입력')
        valRes = False

    if kwargs["userCount"] == '':
        self.setLog('참가 인원 미 입력')
        valRes = False

    if kwargs["purpose"] == '':
        self.setLog('이용 목적 미 입력')
        valRes = False

    if kwargs["usedDate"] is None:
        self.setLog('이용 날짜 미 입력')
        valRes = False

    if kwargs["startCourt"] == '':
        self.setLog('시작 코트 미 입력')
        valRes = False

    if kwargs["endCourt"] == '':
        self.setLog('종료 코트 미 입력')
        valRes = False

    if kwargs["startTime"] == '':
        self.setLog('시작 시간 미 입력')
        valRes = False

    if kwargs["endTime"] == '':
        self.setLog('종료 시간 미 입력')
        valRes = False

        if not valRes:
            QMessageBox.question(self, 'Warning', '유효성 검증 오류!\nLog를 확인 하세요.', QMessageBox.Ok)
        else:
            iStartTime = int(kwargs["startTime"].split(':')[0])
            iEndTime = int(kwargs["endTime"].split(':')[0])

            if iEndTime - iStartTime == 1:
                QMessageBox.question(self, 'Warning', '해당 시설을 예약하기 위한 최소 시간이 미달되었습니다.', QMessageBox.Ok)
                self.setLog('해당 시설을 예약 하기 위한 최소 시간이 미달되었습니다.')
                valRes = False
            elif iEndTime - iStartTime > 4:
                QMessageBox.question(self, 'Warning', '해당 시설을 예약하기 위한 최대 시간을 초과하였습니다.', QMessageBox.Ok)
                self.setLog('해당 시설을 예약 하기 위한 최대 시간을 초과하였습니다.')
                valRes = False

    return valRes

class Worker(QThread):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent  # self.parent를 사용하여 WindowClass 위젯을 제어할 수 있다.

    def run(self):
        if self.parent.rm is None:
            self.parent.rm = RunMacro(self.parent)

        try:
            self.parent.rm.moveToLoginPage()
        except Exception as e:
            self.parent.rm.quitDriver()
            self.parent.rm = RunMacro(self.parent)
            self.parent.rm.moveToLoginPage()

class StartMacro(QThread):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        # self.parent.rm = RunMacro(self.parent)

    def run(self):
        self.parent.rm.startMacro()

class StopMacro(QThread):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent

    def run(self):
        self.parent.rm.stopMacro()


class Worker2(QThread):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent  # self.parent를 사용하여 WindowClass 위젯을 제어할 수 있다.

    def run(self):
        if self.parent.rm is not None:
            self.parent.rm.quitDriver()
            print(self.parent.tb_Log.toPlainText())


class WindowClass(QMainWindow, form_class):
    def __init__(self):
        super().__init__()

        self.usedDate = None
        self.rm = None
        self.wk = Worker(self)
        self.isWeek = False

        fHolidays = pytimekr.holidays()  # holidays메소드는 리스트 형태로 관련값 반환
        holidays = []
        for fHoliday in fHolidays:
            holidays.append(fHoliday.strftime('%Y%m%d'))

        holidays.append('20220912')
        self.holidays = holidays

        self.setWindowIcon(QIcon('logo.png'))

        self.setupUi(self)

        self.qPixmapVar = QPixmap()
        self.qPixmapVar.load("courtView.jpg")
        self.lbl_Img.setPixmap(self.qPixmapVar)

        self.le_Team.setText('1')
        self.le_Purpose.setText('게임')

        # 현재 시간 표시
        self.timer = QTimer(self)
        self.timer.setInterval(100)
        self.timer.timeout.connect(self.timeout)
        self.timer.start()

        self.cal_UsedDate.showToday()

        # 공휴일 표시
        fm = QTextCharFormat()
        fm.setForeground(Qt.red)
        fm.setBackground(Qt.yellow)

        # 날짜 선택
        self.cal_UsedDate.setGridVisible(True)
        for holiday in self.holidays:
            dHoliday = QDate.fromString(str(holiday), "yyyyMMdd")
            self.cal_UsedDate.setDateTextFormat(dHoliday, fm)

        self.cal_UsedDate.clicked.connect(self.calendarClicked)

        # 참가 인원 ComboBox
        for i in range(1, 5):
            self.cb_UsersCount.addItem(str(i))

        # 시작/종료 코트
        setCourt(self, 1)

        self.cb_StartCourt.currentIndexChanged.connect(self.changeEndCourtComboBoxAction)
        self.cb_StartTime.currentIndexChanged.connect(self.changeEndTimeComboBoxAction)

        # 버튼
        # 로그인 페이지 열기
        self.btn_OpenPage.clicked.connect(self.openPageAction)

        # 캐시 삭제
        self.btn_ClearCache.clicked.connect(self.clearCacheAction)

        # 시작
        self.btn_Start.clicked.connect(self.startMacroAction)

        # 정지
        self.btn_Stop.clicked.connect(self.stopMacroAction)
        self.btn_Stop.setEnabled(False)

        # 종료 버튼 - btn_Exit
        self.btn_Exit.clicked.connect(self.exitProgram)
        self.btn_Exit.clicked.connect(QCoreApplication.instance().quit)

    # Function
    # ==========================================================================
    # selectedUserDate
    def calendarClicked(self):
        week = self.cal_UsedDate.selectedDate().dayOfWeek()
        # self.setLog(str(week)) 6, 7이 주말

        self.usedDate = self.cal_UsedDate.selectedDate().toString('yyyyMMdd')
        self.setLog("선택 한 날짜 : " + self.usedDate)

        self.lbl_SelectedDate.setText('이용 날짜 : ' + self.cal_UsedDate.selectedDate().toString('yyyy-MM-dd'))

        setReservationTime(self, self.usedDate, week, self.holidays)

    # exitProgram
    def exitProgram(self):
        Worker2(self).start()

    # 로그인 페이지 열기
    def openPageAction(self):
        self.setLog("로그인 페이지 Open")
        self.wk.start()

    # 캐시 삭제
    def clearCacheAction(self):
        try:
            shutil.rmtree(r"c:\chrometemp")  # 쿠키 / 캐쉬파일 삭제
            QMessageBox.question(self, 'Info', '크롬 캐시 삭제 완료!', QMessageBox.Ok)
            self.setLog("크롬 캐시 삭제 완료!")
        except Exception as e:
            if e.__class__.__name__ == 'FileNotFoundError':
                self.setLog("삭제 할 캐시가 없습니다.")
                QMessageBox.question(self, 'Warning', '삭제 할 캐시가 없습니다.', QMessageBox.Ok)
            else:
                self.setLog("열려 있는 크롬을 닫고 실행 하세요.")
                QMessageBox.question(self, 'Warning', '열려 있는 크롬을 닫고 실행 하세요.', QMessageBox.Ok)

            pass

    # 매크로 시작
    @pyqtSlot()
    def startMacroAction(self):
        # 대표자
        teamName = self.le_Team.text()
        # 참가 인원
        userCount = self.cb_UsersCount.currentText()
        # 이용 목적
        purpose = self.le_Purpose.text()
        # 이용 날짜
        # self.usedDate
        # 시작 코트
        startCourt = self.cb_StartCourt.currentText()
        # 종료 코트
        endCourt = self.cb_EndCourt.currentText()
        # 시작 시간
        startTime = self.cb_StartTime.currentText()
        # 종료 시간
        endTime = self.cb_EndTime.currentText()

        valRes = True # validation(self, teamName=teamName, userCount=userCount, purpose=purpose, usedDate=self.usedDate, startCourt=startCourt, endCourt=endCourt, startTime=startTime, endTime=endTime)

        if valRes:
            # if self.rm is None:
            #     QMessageBox.question(self, 'Warning', '로그인 페이지를 먼저 열어주세요.', QMessageBox.Ok)
            #     self.setLog('로그인 페이지를 먼저 열어주세요.')
            # else:
            self.btn_Start.setEnabled(False)
            self.btn_Stop.setEnabled(True)

            self.btn_OpenPage.setEnabled(False)
            self.btn_ClearCache.setEnabled(False)

            self.le_Team.setEnabled(False)
            self.le_Purpose.setEnabled(False)

            self.cb_UsersCount.setEnabled(False)
            self.cb_StartCourt.setEnabled(False)
            self.cb_EndCourt.setEnabled(False)
            self.cb_StartTime.setEnabled(False)
            self.cb_EndTime.setEnabled(False)

            self.cal_UsedDate.setEnabled(False)
            StartMacro(self).start()

    # 매크로 중단
    @pyqtSlot()
    def stopMacroAction(self):
        self.btn_Stop.setEnabled(False)
        self.btn_Start.setEnabled(True)

        self.btn_OpenPage.setEnabled(True)
        self.btn_ClearCache.setEnabled(True)

        self.le_Team.setEnabled(True)
        self.le_Purpose.setEnabled(True)

        self.cb_UsersCount.setEnabled(True)
        self.cb_StartCourt.setEnabled(True)
        self.cb_EndCourt.setEnabled(True)
        self.cb_StartTime.setEnabled(True)
        self.cb_EndTime.setEnabled(True)

        self.cal_UsedDate.setEnabled(True)
        StopMacro(self).start()

    # timeOut
    def timeout(self):
        sender = self.sender()
        currentTime = QTime.currentTime().toString("hh:mm:ss")
        if id(sender) == id(self.timer):
            self.ln_CurrentTime.display(currentTime)

    # 종료 코트 CB
    def changeEndCourtComboBoxAction(self):
        startCourtNum = int(self.cb_StartCourt.currentText())

        setCourt(self, startCourtNum)

    # 종료 시간 CB
    def changeEndTimeComboBoxAction(self):
        week = self.cal_UsedDate.selectedDate().dayOfWeek()
        # self.setLog(str(week)) 6, 7이 주말

        setReservationEndTime(self.cb_EndTime, self.cb_StartTime.currentIndex(), self.usedDate, week, self.holidays)

    # set Log
    @pyqtSlot()
    def setLog(self, msg):
        currentTime = QTime.currentTime().toString()
        self.tb_Log.append(currentTime + ' : ' + msg)
    # ==========================================================================


if __name__ == "__main__":
    app = QApplication(sys.argv)
    myWindow = WindowClass()
    myWindow.show()
    app.exec_()
